# aegis/web_interface/pages/1_ðŸ“Š_Security_Dashboard.py

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

# --- Page Configuration ---
st.set_page_config(page_title="Aegis Security Dashboard", page_icon="ðŸ“Š", layout="wide")

st.title("ðŸ“Š Security Dashboard")
st.markdown("Upload and visualize batch evaluation reports.")

# --- Data Loading ---
@st.cache_data
def load_report_data(uploaded_file):
    """Loads and caches data from an uploaded report file."""
    try:
        if uploaded_file.name.endswith('.csv'):
            df = pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith('.json'):
            df = pd.read_json(uploaded_file)
        else:
            st.error("Unsupported file type. Please upload a JSON or CSV file.")
            return pd.DataFrame()
            
        if 'classification' in df.columns:
            df['classification'] = df['classification'].astype(str)
        return df
    except Exception as e:
        st.error(f"Error loading report data: {e}")
        return pd.DataFrame()

# --- Main UI ---
st.header("Upload a Report File")
uploaded_file = st.file_uploader("Choose a JSON or CSV report file generated by Aegis", type=['json', 'csv'])

df = pd.DataFrame()
if uploaded_file is not None:
    df = load_report_data(uploaded_file)

# --- Visualization Section ---
if not df.empty:
    st.divider()
    st.header("Vulnerability Analysis")
    
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("Vulnerability Heatmap")
        try:
            heatmap_data = df.pivot_table(index='category', columns='model_name', values='vulnerability_score', aggfunc='mean').fillna(0)
            fig_heatmap = px.imshow(
                heatmap_data, 
                text_auto=".1f", 
                aspect="auto", 
                color_continuous_scale='Reds',
                labels=dict(x="Model Name", y="Attack Category", color="Avg Score"),
                title="Average Vulnerability Score by Model & Category"
            )
            st.plotly_chart(fig_heatmap, use_container_width=True)
        except Exception as e:
            st.warning(f"Could not generate heatmap. It may require multiple categories and models in the report. Error: {e}")

    with col2:
        st.subheader("Classification Breakdown")
        classification_counts = df['classification'].value_counts()
        fig_bar = px.bar(
            classification_counts,
            x=classification_counts.index,
            y=classification_counts.values,
            color=classification_counts.index,
            labels={'x': 'Classification', 'y': 'Count'},
            title="Total Evaluation Outcomes",
            color_discrete_map={
                'NON_COMPLIANT': 'red',
                'COMPLIANT': 'green',
                'PARTIAL_COMPLIANCE': 'orange',
                'AMBIGUOUS': 'grey',
                'ERROR': 'black'
            }
        )
        st.plotly_chart(fig_bar, use_container_width=True)
    
    st.divider()
    st.header("Detailed Report Data")
    st.dataframe(df)
else:
    st.info("Upload a report file to see the visualizations.")
